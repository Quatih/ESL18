
Motor_cntrl.elf:     file format elf32-littlenios2
Motor_cntrl.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001bd4 memsz 0x00001bd4 flags r-x
    LOAD off    0x00002bf4 vaddr 0x00009bf4 paddr 0x00009ed4 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000031b4 vaddr 0x0000a1b4 paddr 0x0000a1b4 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001a10  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  00009bc8  00009bc8  00002bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00009bf4  00009ed4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000a1b4  0000a1b4  000031b4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000530  00000000  00000000  00002ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000549e  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001fb6  00000000  00000000  000088c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000022e8  00000000  00000000  0000a87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000798  00000000  00000000  0000cb64  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000137e  00000000  00000000  0000d2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000d71  00000000  00000000  0000e67a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  0000f3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  0000f440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00010da1  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00010da7  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00010da8  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00010da9  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00010dad  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00010db1  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00010db5  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00010dbe  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00010dc7  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000022  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003e55b  00000000  00000000  00010dfa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
00009bc8 l    d  .rodata	00000000 .rodata
00009bf4 l    d  .rwdata	00000000 .rwdata
0000a1b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Motor_cntrl_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00008278 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000083fc l     F .text	00000038 alt_dev_reg
00009bf4 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00008700 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00008950 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008a88 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00008ab4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008e9c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00008ff4 l     F .text	00000050 alt_get_errno
00009044 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00009dc8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009a34 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008364 g     F .text	00000068 alt_main
0000a1d0 g     O .bss	00000100 alt_irq
00009ed4 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a1cc g     O .bss	00000004 errno
0000a1b8 g     O .bss	00000004 alt_argv
00011ea8 g       *ABS*	00000000 _gp
000083cc g     F .text	00000030 usleep
00009c48 g     O .rwdata	00000180 alt_fd_list
000094c8 g     F .text	00000090 alt_find_dev
00008f7c g     F .text	00000078 alt_io_redirect
00008574 g     F .text	000000f4 altera_avalon_jtag_uart_read
00009b54 g     F .text	00000008 __udivsi3
00009740 g     F .text	0000008c alt_icache_flush
00009eb8 g     O .rwdata	00000004 alt_max_fd
00009ecc g     O .rwdata	00000004 _global_impure_ptr
0000a2d0 g       *ABS*	00000000 __bss_end
00008dac g     F .text	000000f0 alt_iic_isr_register
000093a4 g     F .text	00000104 alt_tick
00008d60 g     F .text	0000004c alt_ic_irq_enabled
0000930c g     F .text	00000098 alt_alarm_stop
0000a1c0 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	000000cc alt_irq_handler
00009c20 g     O .rwdata	00000028 alt_dev_null
00008a6c g     F .text	0000001c alt_dcache_flush_all
00009ed4 g       *ABS*	00000000 __ram_rwdata_end
00009eb0 g     O .rwdata	00000008 alt_dev_list
00009bf4 g       *ABS*	00000000 __ram_rodata_end
00009b5c g     F .text	00000008 __umodsi3
0000a2d0 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008774 g     F .text	00000088 alt_avalon_timer_sc_init
00008668 g     F .text	00000098 altera_avalon_jtag_uart_write
0000985c g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000a1c4 g     O .bss	00000004 _alt_tick_rate
0000a1c8 g     O .bss	00000004 _alt_nticks
00008468 g     F .text	0000004c alt_sys_init
00009b64 g     F .text	00000028 __mulsi3
00009bf4 g       *ABS*	00000000 __ram_rwdata_start
00009bc8 g       *ABS*	00000000 __ram_rodata_start
000084b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000966c g     F .text	000000d4 alt_get_fd
000087fc g     F .text	00000154 alt_busy_sleep
000097ec g     F .text	00000048 memcmp
0000a2d0 g       *ABS*	00000000 __alt_stack_base
00009558 g     F .text	00000114 alt_find_file
00008b04 g     F .text	000000a0 alt_dev_llist_insert
0000a1b4 g       *ABS*	00000000 __bss_start
000081f4 g     F .text	00000084 main
0000a1bc g     O .bss	00000004 alt_envp
00008514 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009ebc g     O .rwdata	00000004 alt_errno
00009aa8 g     F .text	00000050 __divsi3
00009bc8 g       *ABS*	00000000 __flash_rodata_start
00008434 g     F .text	00000034 alt_irq_init
0000928c g     F .text	00000080 alt_release_fd
00009ed0 g     O .rwdata	00000004 _impure_ptr
0000a1b4 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00009ea8 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008bd4 g     F .text	00000050 alt_ic_isr_register
00009ed4 g       *ABS*	00000000 _edata
0000a2d0 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
00008cc0 g     F .text	000000a0 alt_ic_irq_disable
000094a8 g     F .text	00000020 altera_nios2_qsys_irq_init
000097cc g     F .text	00000020 exit
00009af8 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
00009b8c g     F .text	0000003c _exit
00009834 g     F .text	00000028 strlen
00009134 g     F .text	00000158 open
00008ba4 g     F .text	00000030 alt_icache_flush_all
00009ec0 g     O .rwdata	00000004 alt_priority_mask
00008c24 g     F .text	0000009c alt_ic_irq_enable
00009ec4 g     O .rwdata	00000008 alt_alarm_list
000089a0 g     F .text	000000cc close
000082e4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18e87404 	addi	r3,r3,-24112
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	21287404 	addi	r4,r4,-24112
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d687aa14 	ori	gp,gp,7848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10a86d14 	ori	r2,r2,41396

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18e8b414 	ori	r3,r3,41680

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	00082e40 	call	82e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	00083640 	call	8364 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <main>:
#include "sys/alt_stdio.h"
#include "system.h"

#include <unistd.h>
int main()
{
    81f4:	defffc04 	addi	sp,sp,-16
    81f8:	dfc00315 	stw	ra,12(sp)
    81fc:	df000215 	stw	fp,8(sp)
    8200:	df000204 	addi	fp,sp,8
  int width = 0;
    8204:	e03ffe15 	stw	zero,-8(fp)
    8208:	00000106 	br	8210 <main+0x1c>
	  width++;
	  if(width == 251){
		  usleep(1000000);
		  width = 0;
	  }
  }
    820c:	0001883a 	nop
int main()
{
  int width = 0;
  while(1){

	  alt_u32 output = 0;
    8210:	e03fff15 	stw	zero,-4(fp)
	  output = output | width;
    8214:	e0bffe17 	ldw	r2,-8(fp)
    8218:	e0ffff17 	ldw	r3,-4(fp)
    821c:	1884b03a 	or	r2,r3,r2
    8220:	e0bfff15 	stw	r2,-4(fp)
	  output = output | 1 << 8;
    8224:	e0bfff17 	ldw	r2,-4(fp)
    8228:	10804014 	ori	r2,r2,256
    822c:	e0bfff15 	stw	r2,-4(fp)
	  IOWR_32DIRECT(MOTOR_CONTROLLER_0_BASE, 0x00, output);
    8230:	e0ffff17 	ldw	r3,-4(fp)
    8234:	00800074 	movhi	r2,1
    8238:	10840004 	addi	r2,r2,4096
    823c:	10c00035 	stwio	r3,0(r2)
	  //printf("Read from decoders: %d, %d\n", enc0, enc1);
	  usleep(100000); //slp 1s
    8240:	010000b4 	movhi	r4,2
    8244:	2121a804 	addi	r4,r4,-31072
    8248:	00083cc0 	call	83cc <usleep>
	  width++;
    824c:	e0bffe17 	ldw	r2,-8(fp)
    8250:	10800044 	addi	r2,r2,1
    8254:	e0bffe15 	stw	r2,-8(fp)
	  if(width == 251){
    8258:	e0bffe17 	ldw	r2,-8(fp)
    825c:	10803ed8 	cmpnei	r2,r2,251
    8260:	103fea1e 	bne	r2,zero,820c <main+0x18>
		  usleep(1000000);
    8264:	010003f4 	movhi	r4,15
    8268:	21109004 	addi	r4,r4,16960
    826c:	00083cc0 	call	83cc <usleep>
		  width = 0;
    8270:	e03ffe15 	stw	zero,-8(fp)
	  }
  }
    8274:	003fe506 	br	820c <main+0x18>

00008278 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8278:	defffc04 	addi	sp,sp,-16
    827c:	df000315 	stw	fp,12(sp)
    8280:	df000304 	addi	fp,sp,12
    8284:	e13ffd15 	stw	r4,-12(fp)
    8288:	e17ffe15 	stw	r5,-8(fp)
    828c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8290:	e0fffe17 	ldw	r3,-8(fp)
    8294:	e0bffd17 	ldw	r2,-12(fp)
    8298:	18800e26 	beq	r3,r2,82d4 <alt_load_section+0x5c>
  {
    while( to != end )
    829c:	00000a06 	br	82c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    82a0:	e0bffd17 	ldw	r2,-12(fp)
    82a4:	10c00017 	ldw	r3,0(r2)
    82a8:	e0bffe17 	ldw	r2,-8(fp)
    82ac:	10c00015 	stw	r3,0(r2)
    82b0:	e0bffe17 	ldw	r2,-8(fp)
    82b4:	10800104 	addi	r2,r2,4
    82b8:	e0bffe15 	stw	r2,-8(fp)
    82bc:	e0bffd17 	ldw	r2,-12(fp)
    82c0:	10800104 	addi	r2,r2,4
    82c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82c8:	e0fffe17 	ldw	r3,-8(fp)
    82cc:	e0bfff17 	ldw	r2,-4(fp)
    82d0:	18bff31e 	bne	r3,r2,82a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    82d4:	e037883a 	mov	sp,fp
    82d8:	df000017 	ldw	fp,0(sp)
    82dc:	dec00104 	addi	sp,sp,4
    82e0:	f800283a 	ret

000082e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    82e4:	defffe04 	addi	sp,sp,-8
    82e8:	dfc00115 	stw	ra,4(sp)
    82ec:	df000015 	stw	fp,0(sp)
    82f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    82f4:	01000074 	movhi	r4,1
    82f8:	2127b504 	addi	r4,r4,-24876
    82fc:	01400074 	movhi	r5,1
    8300:	2966fd04 	addi	r5,r5,-25612
    8304:	01800074 	movhi	r6,1
    8308:	31a7b504 	addi	r6,r6,-24876
    830c:	00082780 	call	8278 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8310:	01000074 	movhi	r4,1
    8314:	21200804 	addi	r4,r4,-32736
    8318:	01400074 	movhi	r5,1
    831c:	29600804 	addi	r5,r5,-32736
    8320:	01800074 	movhi	r6,1
    8324:	31a06e04 	addi	r6,r6,-32328
    8328:	00082780 	call	8278 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    832c:	01000074 	movhi	r4,1
    8330:	2126f204 	addi	r4,r4,-25656
    8334:	01400074 	movhi	r5,1
    8338:	2966f204 	addi	r5,r5,-25656
    833c:	01800074 	movhi	r6,1
    8340:	31a6fd04 	addi	r6,r6,-25612
    8344:	00082780 	call	8278 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8348:	0008a6c0 	call	8a6c <alt_dcache_flush_all>
  alt_icache_flush_all();
    834c:	0008ba40 	call	8ba4 <alt_icache_flush_all>
}
    8350:	e037883a 	mov	sp,fp
    8354:	dfc00117 	ldw	ra,4(sp)
    8358:	df000017 	ldw	fp,0(sp)
    835c:	dec00204 	addi	sp,sp,8
    8360:	f800283a 	ret

00008364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8364:	defffd04 	addi	sp,sp,-12
    8368:	dfc00215 	stw	ra,8(sp)
    836c:	df000115 	stw	fp,4(sp)
    8370:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8374:	0009883a 	mov	r4,zero
    8378:	00084340 	call	8434 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    837c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8380:	00084680 	call	8468 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8384:	01000074 	movhi	r4,1
    8388:	2126f204 	addi	r4,r4,-25656
    838c:	01400074 	movhi	r5,1
    8390:	2966f204 	addi	r5,r5,-25656
    8394:	01800074 	movhi	r6,1
    8398:	31a6f204 	addi	r6,r6,-25656
    839c:	0008f7c0 	call	8f7c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    83a0:	d120c317 	ldw	r4,-31988(gp)
    83a4:	d0e0c417 	ldw	r3,-31984(gp)
    83a8:	d0a0c517 	ldw	r2,-31980(gp)
    83ac:	180b883a 	mov	r5,r3
    83b0:	100d883a 	mov	r6,r2
    83b4:	00081f40 	call	81f4 <main>
    83b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    83bc:	01000044 	movi	r4,1
    83c0:	00089a00 	call	89a0 <close>
  exit (result);
    83c4:	e13fff17 	ldw	r4,-4(fp)
    83c8:	00097cc0 	call	97cc <exit>

000083cc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    83cc:	defffd04 	addi	sp,sp,-12
    83d0:	dfc00215 	stw	ra,8(sp)
    83d4:	df000115 	stw	fp,4(sp)
    83d8:	df000104 	addi	fp,sp,4
    83dc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    83e0:	e13fff17 	ldw	r4,-4(fp)
    83e4:	00087fc0 	call	87fc <alt_busy_sleep>
}
    83e8:	e037883a 	mov	sp,fp
    83ec:	dfc00117 	ldw	ra,4(sp)
    83f0:	df000017 	ldw	fp,0(sp)
    83f4:	dec00204 	addi	sp,sp,8
    83f8:	f800283a 	ret

000083fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    83fc:	defffd04 	addi	sp,sp,-12
    8400:	dfc00215 	stw	ra,8(sp)
    8404:	df000115 	stw	fp,4(sp)
    8408:	df000104 	addi	fp,sp,4
    840c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8410:	e13fff17 	ldw	r4,-4(fp)
    8414:	01400074 	movhi	r5,1
    8418:	2967ac04 	addi	r5,r5,-24912
    841c:	0008b040 	call	8b04 <alt_dev_llist_insert>
}
    8420:	e037883a 	mov	sp,fp
    8424:	dfc00117 	ldw	ra,4(sp)
    8428:	df000017 	ldw	fp,0(sp)
    842c:	dec00204 	addi	sp,sp,8
    8430:	f800283a 	ret

00008434 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8434:	defffd04 	addi	sp,sp,-12
    8438:	dfc00215 	stw	ra,8(sp)
    843c:	df000115 	stw	fp,4(sp)
    8440:	df000104 	addi	fp,sp,4
    8444:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    8448:	00094a80 	call	94a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    844c:	00800044 	movi	r2,1
    8450:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8454:	e037883a 	mov	sp,fp
    8458:	dfc00117 	ldw	ra,4(sp)
    845c:	df000017 	ldw	fp,0(sp)
    8460:	dec00204 	addi	sp,sp,8
    8464:	f800283a 	ret

00008468 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8468:	defffe04 	addi	sp,sp,-8
    846c:	dfc00115 	stw	ra,4(sp)
    8470:	df000015 	stw	fp,0(sp)
    8474:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    8478:	01000074 	movhi	r4,1
    847c:	21070004 	addi	r4,r4,7168
    8480:	000b883a 	mov	r5,zero
    8484:	01800044 	movi	r6,1
    8488:	01c0fa04 	movi	r7,1000
    848c:	00087740 	call	8774 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    8490:	01000074 	movhi	r4,1
    8494:	2126fd04 	addi	r4,r4,-25612
    8498:	00083fc0 	call	83fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    849c:	0001883a 	nop
}
    84a0:	e037883a 	mov	sp,fp
    84a4:	dfc00117 	ldw	ra,4(sp)
    84a8:	df000017 	ldw	fp,0(sp)
    84ac:	dec00204 	addi	sp,sp,8
    84b0:	f800283a 	ret

000084b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    84b4:	defffa04 	addi	sp,sp,-24
    84b8:	dfc00515 	stw	ra,20(sp)
    84bc:	df000415 	stw	fp,16(sp)
    84c0:	df000404 	addi	fp,sp,16
    84c4:	e13ffd15 	stw	r4,-12(fp)
    84c8:	e17ffe15 	stw	r5,-8(fp)
    84cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    84d0:	e0bffd17 	ldw	r2,-12(fp)
    84d4:	10800017 	ldw	r2,0(r2)
    84d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    84dc:	e0bffc17 	ldw	r2,-16(fp)
    84e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    84e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    84e8:	10800217 	ldw	r2,8(r2)
    84ec:	1809883a 	mov	r4,r3
    84f0:	e17ffe17 	ldw	r5,-8(fp)
    84f4:	e1bfff17 	ldw	r6,-4(fp)
    84f8:	100f883a 	mov	r7,r2
    84fc:	00085740 	call	8574 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8500:	e037883a 	mov	sp,fp
    8504:	dfc00117 	ldw	ra,4(sp)
    8508:	df000017 	ldw	fp,0(sp)
    850c:	dec00204 	addi	sp,sp,8
    8510:	f800283a 	ret

00008514 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8514:	defffa04 	addi	sp,sp,-24
    8518:	dfc00515 	stw	ra,20(sp)
    851c:	df000415 	stw	fp,16(sp)
    8520:	df000404 	addi	fp,sp,16
    8524:	e13ffd15 	stw	r4,-12(fp)
    8528:	e17ffe15 	stw	r5,-8(fp)
    852c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8530:	e0bffd17 	ldw	r2,-12(fp)
    8534:	10800017 	ldw	r2,0(r2)
    8538:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    853c:	e0bffc17 	ldw	r2,-16(fp)
    8540:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8544:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8548:	10800217 	ldw	r2,8(r2)
    854c:	1809883a 	mov	r4,r3
    8550:	e17ffe17 	ldw	r5,-8(fp)
    8554:	e1bfff17 	ldw	r6,-4(fp)
    8558:	100f883a 	mov	r7,r2
    855c:	00086680 	call	8668 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8560:	e037883a 	mov	sp,fp
    8564:	dfc00117 	ldw	ra,4(sp)
    8568:	df000017 	ldw	fp,0(sp)
    856c:	dec00204 	addi	sp,sp,8
    8570:	f800283a 	ret

00008574 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8574:	defff704 	addi	sp,sp,-36
    8578:	df000815 	stw	fp,32(sp)
    857c:	df000804 	addi	fp,sp,32
    8580:	e13ffc15 	stw	r4,-16(fp)
    8584:	e17ffd15 	stw	r5,-12(fp)
    8588:	e1bffe15 	stw	r6,-8(fp)
    858c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8590:	e0bffc17 	ldw	r2,-16(fp)
    8594:	10800017 	ldw	r2,0(r2)
    8598:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    859c:	e0bffd17 	ldw	r2,-12(fp)
    85a0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    85a4:	e0bffe17 	ldw	r2,-8(fp)
    85a8:	e0fffd17 	ldw	r3,-12(fp)
    85ac:	1885883a 	add	r2,r3,r2
    85b0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    85b4:	00001406 	br	8608 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    85b8:	e0bff917 	ldw	r2,-28(fp)
    85bc:	10800037 	ldwio	r2,0(r2)
    85c0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    85c4:	e0bffb17 	ldw	r2,-20(fp)
    85c8:	10a0000c 	andi	r2,r2,32768
    85cc:	10000826 	beq	r2,zero,85f0 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    85d0:	e0bffb17 	ldw	r2,-20(fp)
    85d4:	1007883a 	mov	r3,r2
    85d8:	e0bff817 	ldw	r2,-32(fp)
    85dc:	10c00005 	stb	r3,0(r2)
    85e0:	e0bff817 	ldw	r2,-32(fp)
    85e4:	10800044 	addi	r2,r2,1
    85e8:	e0bff815 	stw	r2,-32(fp)
    85ec:	00000606 	br	8608 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    85f0:	e0fff817 	ldw	r3,-32(fp)
    85f4:	e0bffd17 	ldw	r2,-12(fp)
    85f8:	1880071e 	bne	r3,r2,8618 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    85fc:	e0bfff17 	ldw	r2,-4(fp)
    8600:	1090000c 	andi	r2,r2,16384
    8604:	1000061e 	bne	r2,zero,8620 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8608:	e0fff817 	ldw	r3,-32(fp)
    860c:	e0bffa17 	ldw	r2,-24(fp)
    8610:	18bfe936 	bltu	r3,r2,85b8 <altera_avalon_jtag_uart_read+0x44>
    8614:	00000306 	br	8624 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    8618:	0001883a 	nop
    861c:	00000106 	br	8624 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    8620:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8624:	e0fff817 	ldw	r3,-32(fp)
    8628:	e0bffd17 	ldw	r2,-12(fp)
    862c:	18800426 	beq	r3,r2,8640 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8630:	e0fff817 	ldw	r3,-32(fp)
    8634:	e0bffd17 	ldw	r2,-12(fp)
    8638:	1885c83a 	sub	r2,r3,r2
    863c:	00000606 	br	8658 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    8640:	e0bfff17 	ldw	r2,-4(fp)
    8644:	1090000c 	andi	r2,r2,16384
    8648:	10000226 	beq	r2,zero,8654 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    864c:	00bffd44 	movi	r2,-11
    8650:	00000106 	br	8658 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    8654:	00bffec4 	movi	r2,-5
}
    8658:	e037883a 	mov	sp,fp
    865c:	df000017 	ldw	fp,0(sp)
    8660:	dec00104 	addi	sp,sp,4
    8664:	f800283a 	ret

00008668 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8668:	defff904 	addi	sp,sp,-28
    866c:	df000615 	stw	fp,24(sp)
    8670:	df000604 	addi	fp,sp,24
    8674:	e13ffc15 	stw	r4,-16(fp)
    8678:	e17ffd15 	stw	r5,-12(fp)
    867c:	e1bffe15 	stw	r6,-8(fp)
    8680:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    8684:	e0bffc17 	ldw	r2,-16(fp)
    8688:	10800017 	ldw	r2,0(r2)
    868c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    8690:	e0bffe17 	ldw	r2,-8(fp)
    8694:	e0fffd17 	ldw	r3,-12(fp)
    8698:	1885883a 	add	r2,r3,r2
    869c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    86a0:	00000f06 	br	86e0 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    86a4:	e0bffa17 	ldw	r2,-24(fp)
    86a8:	10800104 	addi	r2,r2,4
    86ac:	10800037 	ldwio	r2,0(r2)
    86b0:	10bfffec 	andhi	r2,r2,65535
    86b4:	10000a26 	beq	r2,zero,86e0 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    86b8:	e0bffa17 	ldw	r2,-24(fp)
    86bc:	e0fffd17 	ldw	r3,-12(fp)
    86c0:	18c00003 	ldbu	r3,0(r3)
    86c4:	18c03fcc 	andi	r3,r3,255
    86c8:	18c0201c 	xori	r3,r3,128
    86cc:	18ffe004 	addi	r3,r3,-128
    86d0:	e13ffd17 	ldw	r4,-12(fp)
    86d4:	21000044 	addi	r4,r4,1
    86d8:	e13ffd15 	stw	r4,-12(fp)
    86dc:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    86e0:	e0fffd17 	ldw	r3,-12(fp)
    86e4:	e0bffb17 	ldw	r2,-20(fp)
    86e8:	18bfee36 	bltu	r3,r2,86a4 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    86ec:	e0bffe17 	ldw	r2,-8(fp)
}
    86f0:	e037883a 	mov	sp,fp
    86f4:	df000017 	ldw	fp,0(sp)
    86f8:	dec00104 	addi	sp,sp,4
    86fc:	f800283a 	ret

00008700 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    8700:	defffa04 	addi	sp,sp,-24
    8704:	dfc00515 	stw	ra,20(sp)
    8708:	df000415 	stw	fp,16(sp)
    870c:	df000404 	addi	fp,sp,16
    8710:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    8714:	0007883a 	mov	r3,zero
    8718:	e0bfff17 	ldw	r2,-4(fp)
    871c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    8720:	e0bfff17 	ldw	r2,-4(fp)
    8724:	10800104 	addi	r2,r2,4
    8728:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    872c:	0005303a 	rdctl	r2,status
    8730:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8734:	e0fffd17 	ldw	r3,-12(fp)
    8738:	00bfff84 	movi	r2,-2
    873c:	1884703a 	and	r2,r3,r2
    8740:	1001703a 	wrctl	status,r2
  
  return context;
    8744:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    8748:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    874c:	00093a40 	call	93a4 <alt_tick>
    8750:	e0bffc17 	ldw	r2,-16(fp)
    8754:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8758:	e0bffe17 	ldw	r2,-8(fp)
    875c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    8760:	e037883a 	mov	sp,fp
    8764:	dfc00117 	ldw	ra,4(sp)
    8768:	df000017 	ldw	fp,0(sp)
    876c:	dec00204 	addi	sp,sp,8
    8770:	f800283a 	ret

00008774 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    8774:	defff804 	addi	sp,sp,-32
    8778:	dfc00715 	stw	ra,28(sp)
    877c:	df000615 	stw	fp,24(sp)
    8780:	df000604 	addi	fp,sp,24
    8784:	e13ffc15 	stw	r4,-16(fp)
    8788:	e17ffd15 	stw	r5,-12(fp)
    878c:	e1bffe15 	stw	r6,-8(fp)
    8790:	e1ffff15 	stw	r7,-4(fp)
    8794:	e0bfff17 	ldw	r2,-4(fp)
    8798:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    879c:	00800074 	movhi	r2,1
    87a0:	10a87104 	addi	r2,r2,-24124
    87a4:	10800017 	ldw	r2,0(r2)
    87a8:	1000041e 	bne	r2,zero,87bc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    87ac:	00800074 	movhi	r2,1
    87b0:	10a87104 	addi	r2,r2,-24124
    87b4:	e0fffb17 	ldw	r3,-20(fp)
    87b8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    87bc:	e0bffc17 	ldw	r2,-16(fp)
    87c0:	10800104 	addi	r2,r2,4
    87c4:	00c001c4 	movi	r3,7
    87c8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    87cc:	d8000015 	stw	zero,0(sp)
    87d0:	e13ffd17 	ldw	r4,-12(fp)
    87d4:	e17ffe17 	ldw	r5,-8(fp)
    87d8:	01800074 	movhi	r6,1
    87dc:	31a1c004 	addi	r6,r6,-30976
    87e0:	e1fffc17 	ldw	r7,-16(fp)
    87e4:	0008bd40 	call	8bd4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    87e8:	e037883a 	mov	sp,fp
    87ec:	dfc00117 	ldw	ra,4(sp)
    87f0:	df000017 	ldw	fp,0(sp)
    87f4:	dec00204 	addi	sp,sp,8
    87f8:	f800283a 	ret

000087fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    87fc:	defffa04 	addi	sp,sp,-24
    8800:	dfc00515 	stw	ra,20(sp)
    8804:	df000415 	stw	fp,16(sp)
    8808:	df000404 	addi	fp,sp,16
    880c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    8810:	008000c4 	movi	r2,3
    8814:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    8818:	e13ffd17 	ldw	r4,-12(fp)
    881c:	014003f4 	movhi	r5,15
    8820:	29509004 	addi	r5,r5,16960
    8824:	0009b640 	call	9b64 <__mulsi3>
    8828:	0100bef4 	movhi	r4,763
    882c:	213c2004 	addi	r4,r4,-3968
    8830:	100b883a 	mov	r5,r2
    8834:	0009b540 	call	9b54 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8838:	01200034 	movhi	r4,32768
    883c:	213fffc4 	addi	r4,r4,-1
    8840:	100b883a 	mov	r5,r2
    8844:	0009b540 	call	9b54 <__udivsi3>
    8848:	e13fff17 	ldw	r4,-4(fp)
    884c:	100b883a 	mov	r5,r2
    8850:	0009b540 	call	9b54 <__udivsi3>
    8854:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8858:	e0bffe17 	ldw	r2,-8(fp)
    885c:	10002926 	beq	r2,zero,8904 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
    8860:	e03ffc15 	stw	zero,-16(fp)
    8864:	00001606 	br	88c0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8868:	00a00034 	movhi	r2,32768
    886c:	10bfffc4 	addi	r2,r2,-1
    8870:	10bfffc4 	addi	r2,r2,-1
    8874:	103ffe1e 	bne	r2,zero,8870 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    8878:	e13ffd17 	ldw	r4,-12(fp)
    887c:	014003f4 	movhi	r5,15
    8880:	29509004 	addi	r5,r5,16960
    8884:	0009b640 	call	9b64 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8888:	0100bef4 	movhi	r4,763
    888c:	213c2004 	addi	r4,r4,-3968
    8890:	100b883a 	mov	r5,r2
    8894:	0009b540 	call	9b54 <__udivsi3>
    8898:	01200034 	movhi	r4,32768
    889c:	213fffc4 	addi	r4,r4,-1
    88a0:	100b883a 	mov	r5,r2
    88a4:	0009b540 	call	9b54 <__udivsi3>
    88a8:	e0ffff17 	ldw	r3,-4(fp)
    88ac:	1885c83a 	sub	r2,r3,r2
    88b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    88b4:	e0bffc17 	ldw	r2,-16(fp)
    88b8:	10800044 	addi	r2,r2,1
    88bc:	e0bffc15 	stw	r2,-16(fp)
    88c0:	e0fffc17 	ldw	r3,-16(fp)
    88c4:	e0bffe17 	ldw	r2,-8(fp)
    88c8:	18bfe716 	blt	r3,r2,8868 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    88cc:	e13ffd17 	ldw	r4,-12(fp)
    88d0:	014003f4 	movhi	r5,15
    88d4:	29509004 	addi	r5,r5,16960
    88d8:	0009b640 	call	9b64 <__mulsi3>
    88dc:	0100bef4 	movhi	r4,763
    88e0:	213c2004 	addi	r4,r4,-3968
    88e4:	100b883a 	mov	r5,r2
    88e8:	0009b540 	call	9b54 <__udivsi3>
    88ec:	1009883a 	mov	r4,r2
    88f0:	e17fff17 	ldw	r5,-4(fp)
    88f4:	0009b640 	call	9b64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    88f8:	10bfffc4 	addi	r2,r2,-1
    88fc:	103ffe1e 	bne	r2,zero,88f8 <alt_busy_sleep+0xfc>
    8900:	00000d06 	br	8938 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    8904:	e13ffd17 	ldw	r4,-12(fp)
    8908:	014003f4 	movhi	r5,15
    890c:	29509004 	addi	r5,r5,16960
    8910:	0009b640 	call	9b64 <__mulsi3>
    8914:	0100bef4 	movhi	r4,763
    8918:	213c2004 	addi	r4,r4,-3968
    891c:	100b883a 	mov	r5,r2
    8920:	0009b540 	call	9b54 <__udivsi3>
    8924:	1009883a 	mov	r4,r2
    8928:	e17fff17 	ldw	r5,-4(fp)
    892c:	0009b640 	call	9b64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8930:	10bfffc4 	addi	r2,r2,-1
    8934:	00bffe16 	blt	zero,r2,8930 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    8938:	0005883a 	mov	r2,zero
}
    893c:	e037883a 	mov	sp,fp
    8940:	dfc00117 	ldw	ra,4(sp)
    8944:	df000017 	ldw	fp,0(sp)
    8948:	dec00204 	addi	sp,sp,8
    894c:	f800283a 	ret

00008950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8950:	defffe04 	addi	sp,sp,-8
    8954:	dfc00115 	stw	ra,4(sp)
    8958:	df000015 	stw	fp,0(sp)
    895c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8960:	00800074 	movhi	r2,1
    8964:	10a7af04 	addi	r2,r2,-24900
    8968:	10800017 	ldw	r2,0(r2)
    896c:	10000526 	beq	r2,zero,8984 <alt_get_errno+0x34>
    8970:	00800074 	movhi	r2,1
    8974:	10a7af04 	addi	r2,r2,-24900
    8978:	10800017 	ldw	r2,0(r2)
    897c:	103ee83a 	callr	r2
    8980:	00000206 	br	898c <alt_get_errno+0x3c>
    8984:	00800074 	movhi	r2,1
    8988:	10a87304 	addi	r2,r2,-24116
}
    898c:	e037883a 	mov	sp,fp
    8990:	dfc00117 	ldw	ra,4(sp)
    8994:	df000017 	ldw	fp,0(sp)
    8998:	dec00204 	addi	sp,sp,8
    899c:	f800283a 	ret

000089a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    89a0:	defffb04 	addi	sp,sp,-20
    89a4:	dfc00415 	stw	ra,16(sp)
    89a8:	df000315 	stw	fp,12(sp)
    89ac:	df000304 	addi	fp,sp,12
    89b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    89b4:	e0bfff17 	ldw	r2,-4(fp)
    89b8:	10000716 	blt	r2,zero,89d8 <close+0x38>
    89bc:	e13fff17 	ldw	r4,-4(fp)
    89c0:	01400304 	movi	r5,12
    89c4:	0009b640 	call	9b64 <__mulsi3>
    89c8:	00c00074 	movhi	r3,1
    89cc:	18e71204 	addi	r3,r3,-25528
    89d0:	10c5883a 	add	r2,r2,r3
    89d4:	00000106 	br	89dc <close+0x3c>
    89d8:	0005883a 	mov	r2,zero
    89dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    89e0:	e0bffd17 	ldw	r2,-12(fp)
    89e4:	10001826 	beq	r2,zero,8a48 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    89e8:	e0bffd17 	ldw	r2,-12(fp)
    89ec:	10800017 	ldw	r2,0(r2)
    89f0:	10800417 	ldw	r2,16(r2)
    89f4:	10000626 	beq	r2,zero,8a10 <close+0x70>
    89f8:	e0bffd17 	ldw	r2,-12(fp)
    89fc:	10800017 	ldw	r2,0(r2)
    8a00:	10800417 	ldw	r2,16(r2)
    8a04:	e13ffd17 	ldw	r4,-12(fp)
    8a08:	103ee83a 	callr	r2
    8a0c:	00000106 	br	8a14 <close+0x74>
    8a10:	0005883a 	mov	r2,zero
    8a14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    8a18:	e13fff17 	ldw	r4,-4(fp)
    8a1c:	000928c0 	call	928c <alt_release_fd>
    if (rval < 0)
    8a20:	e0bffe17 	ldw	r2,-8(fp)
    8a24:	1000060e 	bge	r2,zero,8a40 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    8a28:	00089500 	call	8950 <alt_get_errno>
    8a2c:	e0fffe17 	ldw	r3,-8(fp)
    8a30:	00c7c83a 	sub	r3,zero,r3
    8a34:	10c00015 	stw	r3,0(r2)
      return -1;
    8a38:	00bfffc4 	movi	r2,-1
    8a3c:	00000606 	br	8a58 <close+0xb8>
    }
    return 0;
    8a40:	0005883a 	mov	r2,zero
    8a44:	00000406 	br	8a58 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8a48:	00089500 	call	8950 <alt_get_errno>
    8a4c:	00c01444 	movi	r3,81
    8a50:	10c00015 	stw	r3,0(r2)
    return -1;
    8a54:	00bfffc4 	movi	r2,-1
  }
}
    8a58:	e037883a 	mov	sp,fp
    8a5c:	dfc00117 	ldw	ra,4(sp)
    8a60:	df000017 	ldw	fp,0(sp)
    8a64:	dec00204 	addi	sp,sp,8
    8a68:	f800283a 	ret

00008a6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8a6c:	deffff04 	addi	sp,sp,-4
    8a70:	df000015 	stw	fp,0(sp)
    8a74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8a78:	e037883a 	mov	sp,fp
    8a7c:	df000017 	ldw	fp,0(sp)
    8a80:	dec00104 	addi	sp,sp,4
    8a84:	f800283a 	ret

00008a88 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8a88:	defffc04 	addi	sp,sp,-16
    8a8c:	df000315 	stw	fp,12(sp)
    8a90:	df000304 	addi	fp,sp,12
    8a94:	e13ffd15 	stw	r4,-12(fp)
    8a98:	e17ffe15 	stw	r5,-8(fp)
    8a9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8aa0:	e0bfff17 	ldw	r2,-4(fp)
}
    8aa4:	e037883a 	mov	sp,fp
    8aa8:	df000017 	ldw	fp,0(sp)
    8aac:	dec00104 	addi	sp,sp,4
    8ab0:	f800283a 	ret

00008ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ab4:	defffe04 	addi	sp,sp,-8
    8ab8:	dfc00115 	stw	ra,4(sp)
    8abc:	df000015 	stw	fp,0(sp)
    8ac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8ac4:	00800074 	movhi	r2,1
    8ac8:	10a7af04 	addi	r2,r2,-24900
    8acc:	10800017 	ldw	r2,0(r2)
    8ad0:	10000526 	beq	r2,zero,8ae8 <alt_get_errno+0x34>
    8ad4:	00800074 	movhi	r2,1
    8ad8:	10a7af04 	addi	r2,r2,-24900
    8adc:	10800017 	ldw	r2,0(r2)
    8ae0:	103ee83a 	callr	r2
    8ae4:	00000206 	br	8af0 <alt_get_errno+0x3c>
    8ae8:	00800074 	movhi	r2,1
    8aec:	10a87304 	addi	r2,r2,-24116
}
    8af0:	e037883a 	mov	sp,fp
    8af4:	dfc00117 	ldw	ra,4(sp)
    8af8:	df000017 	ldw	fp,0(sp)
    8afc:	dec00204 	addi	sp,sp,8
    8b00:	f800283a 	ret

00008b04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    8b04:	defffa04 	addi	sp,sp,-24
    8b08:	dfc00515 	stw	ra,20(sp)
    8b0c:	df000415 	stw	fp,16(sp)
    8b10:	df000404 	addi	fp,sp,16
    8b14:	e13ffe15 	stw	r4,-8(fp)
    8b18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8b1c:	e0bffe17 	ldw	r2,-8(fp)
    8b20:	10000326 	beq	r2,zero,8b30 <alt_dev_llist_insert+0x2c>
    8b24:	e0bffe17 	ldw	r2,-8(fp)
    8b28:	10800217 	ldw	r2,8(r2)
    8b2c:	1000051e 	bne	r2,zero,8b44 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    8b30:	0008ab40 	call	8ab4 <alt_get_errno>
    8b34:	00c00584 	movi	r3,22
    8b38:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8b3c:	00bffa84 	movi	r2,-22
    8b40:	00001306 	br	8b90 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8b44:	e0bffe17 	ldw	r2,-8(fp)
    8b48:	e0ffff17 	ldw	r3,-4(fp)
    8b4c:	e0fffc15 	stw	r3,-16(fp)
    8b50:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8b54:	e0bffd17 	ldw	r2,-12(fp)
    8b58:	e0fffc17 	ldw	r3,-16(fp)
    8b5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8b60:	e0bffc17 	ldw	r2,-16(fp)
    8b64:	10c00017 	ldw	r3,0(r2)
    8b68:	e0bffd17 	ldw	r2,-12(fp)
    8b6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8b70:	e0bffc17 	ldw	r2,-16(fp)
    8b74:	10800017 	ldw	r2,0(r2)
    8b78:	e0fffd17 	ldw	r3,-12(fp)
    8b7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8b80:	e0bffc17 	ldw	r2,-16(fp)
    8b84:	e0fffd17 	ldw	r3,-12(fp)
    8b88:	10c00015 	stw	r3,0(r2)

  return 0;  
    8b8c:	0005883a 	mov	r2,zero
}
    8b90:	e037883a 	mov	sp,fp
    8b94:	dfc00117 	ldw	ra,4(sp)
    8b98:	df000017 	ldw	fp,0(sp)
    8b9c:	dec00204 	addi	sp,sp,8
    8ba0:	f800283a 	ret

00008ba4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8ba4:	defffe04 	addi	sp,sp,-8
    8ba8:	dfc00115 	stw	ra,4(sp)
    8bac:	df000015 	stw	fp,0(sp)
    8bb0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8bb4:	0009883a 	mov	r4,zero
    8bb8:	01440004 	movi	r5,4096
    8bbc:	00097400 	call	9740 <alt_icache_flush>
#endif
}
    8bc0:	e037883a 	mov	sp,fp
    8bc4:	dfc00117 	ldw	ra,4(sp)
    8bc8:	df000017 	ldw	fp,0(sp)
    8bcc:	dec00204 	addi	sp,sp,8
    8bd0:	f800283a 	ret

00008bd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8bd4:	defff904 	addi	sp,sp,-28
    8bd8:	dfc00615 	stw	ra,24(sp)
    8bdc:	df000515 	stw	fp,20(sp)
    8be0:	df000504 	addi	fp,sp,20
    8be4:	e13ffc15 	stw	r4,-16(fp)
    8be8:	e17ffd15 	stw	r5,-12(fp)
    8bec:	e1bffe15 	stw	r6,-8(fp)
    8bf0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8bf4:	e0800217 	ldw	r2,8(fp)
    8bf8:	d8800015 	stw	r2,0(sp)
    8bfc:	e13ffc17 	ldw	r4,-16(fp)
    8c00:	e17ffd17 	ldw	r5,-12(fp)
    8c04:	e1bffe17 	ldw	r6,-8(fp)
    8c08:	e1ffff17 	ldw	r7,-4(fp)
    8c0c:	0008dac0 	call	8dac <alt_iic_isr_register>
}  
    8c10:	e037883a 	mov	sp,fp
    8c14:	dfc00117 	ldw	ra,4(sp)
    8c18:	df000017 	ldw	fp,0(sp)
    8c1c:	dec00204 	addi	sp,sp,8
    8c20:	f800283a 	ret

00008c24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    8c24:	defff904 	addi	sp,sp,-28
    8c28:	df000615 	stw	fp,24(sp)
    8c2c:	df000604 	addi	fp,sp,24
    8c30:	e13ffe15 	stw	r4,-8(fp)
    8c34:	e17fff15 	stw	r5,-4(fp)
    8c38:	e0bfff17 	ldw	r2,-4(fp)
    8c3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c40:	0005303a 	rdctl	r2,status
    8c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c48:	e0fffb17 	ldw	r3,-20(fp)
    8c4c:	00bfff84 	movi	r2,-2
    8c50:	1884703a 	and	r2,r3,r2
    8c54:	1001703a 	wrctl	status,r2
  
  return context;
    8c58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8c5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    8c60:	e0bffa17 	ldw	r2,-24(fp)
    8c64:	00c00044 	movi	r3,1
    8c68:	1884983a 	sll	r2,r3,r2
    8c6c:	1007883a 	mov	r3,r2
    8c70:	00800074 	movhi	r2,1
    8c74:	10a87004 	addi	r2,r2,-24128
    8c78:	10800017 	ldw	r2,0(r2)
    8c7c:	1886b03a 	or	r3,r3,r2
    8c80:	00800074 	movhi	r2,1
    8c84:	10a87004 	addi	r2,r2,-24128
    8c88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8c8c:	00800074 	movhi	r2,1
    8c90:	10a87004 	addi	r2,r2,-24128
    8c94:	10800017 	ldw	r2,0(r2)
    8c98:	100170fa 	wrctl	ienable,r2
    8c9c:	e0bffc17 	ldw	r2,-16(fp)
    8ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ca4:	e0bffd17 	ldw	r2,-12(fp)
    8ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8cac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    8cb0:	e037883a 	mov	sp,fp
    8cb4:	df000017 	ldw	fp,0(sp)
    8cb8:	dec00104 	addi	sp,sp,4
    8cbc:	f800283a 	ret

00008cc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    8cc0:	defff904 	addi	sp,sp,-28
    8cc4:	df000615 	stw	fp,24(sp)
    8cc8:	df000604 	addi	fp,sp,24
    8ccc:	e13ffe15 	stw	r4,-8(fp)
    8cd0:	e17fff15 	stw	r5,-4(fp)
    8cd4:	e0bfff17 	ldw	r2,-4(fp)
    8cd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8cdc:	0005303a 	rdctl	r2,status
    8ce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ce4:	e0fffb17 	ldw	r3,-20(fp)
    8ce8:	00bfff84 	movi	r2,-2
    8cec:	1884703a 	and	r2,r3,r2
    8cf0:	1001703a 	wrctl	status,r2
  
  return context;
    8cf4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    8cf8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    8cfc:	e0bffa17 	ldw	r2,-24(fp)
    8d00:	00c00044 	movi	r3,1
    8d04:	1884983a 	sll	r2,r3,r2
    8d08:	0084303a 	nor	r2,zero,r2
    8d0c:	1007883a 	mov	r3,r2
    8d10:	00800074 	movhi	r2,1
    8d14:	10a87004 	addi	r2,r2,-24128
    8d18:	10800017 	ldw	r2,0(r2)
    8d1c:	1886703a 	and	r3,r3,r2
    8d20:	00800074 	movhi	r2,1
    8d24:	10a87004 	addi	r2,r2,-24128
    8d28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    8d2c:	00800074 	movhi	r2,1
    8d30:	10a87004 	addi	r2,r2,-24128
    8d34:	10800017 	ldw	r2,0(r2)
    8d38:	100170fa 	wrctl	ienable,r2
    8d3c:	e0bffc17 	ldw	r2,-16(fp)
    8d40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d44:	e0bffd17 	ldw	r2,-12(fp)
    8d48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    8d4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    8d50:	e037883a 	mov	sp,fp
    8d54:	df000017 	ldw	fp,0(sp)
    8d58:	dec00104 	addi	sp,sp,4
    8d5c:	f800283a 	ret

00008d60 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    8d60:	defffc04 	addi	sp,sp,-16
    8d64:	df000315 	stw	fp,12(sp)
    8d68:	df000304 	addi	fp,sp,12
    8d6c:	e13ffe15 	stw	r4,-8(fp)
    8d70:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    8d74:	000530fa 	rdctl	r2,ienable
    8d78:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    8d7c:	e0bfff17 	ldw	r2,-4(fp)
    8d80:	00c00044 	movi	r3,1
    8d84:	1884983a 	sll	r2,r3,r2
    8d88:	1007883a 	mov	r3,r2
    8d8c:	e0bffd17 	ldw	r2,-12(fp)
    8d90:	1884703a 	and	r2,r3,r2
    8d94:	1004c03a 	cmpne	r2,r2,zero
    8d98:	10803fcc 	andi	r2,r2,255
}
    8d9c:	e037883a 	mov	sp,fp
    8da0:	df000017 	ldw	fp,0(sp)
    8da4:	dec00104 	addi	sp,sp,4
    8da8:	f800283a 	ret

00008dac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    8dac:	defff504 	addi	sp,sp,-44
    8db0:	dfc00a15 	stw	ra,40(sp)
    8db4:	df000915 	stw	fp,36(sp)
    8db8:	df000904 	addi	fp,sp,36
    8dbc:	e13ffc15 	stw	r4,-16(fp)
    8dc0:	e17ffd15 	stw	r5,-12(fp)
    8dc4:	e1bffe15 	stw	r6,-8(fp)
    8dc8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    8dcc:	00bffa84 	movi	r2,-22
    8dd0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    8dd4:	e0bffd17 	ldw	r2,-12(fp)
    8dd8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    8ddc:	e0bff817 	ldw	r2,-32(fp)
    8de0:	10800808 	cmpgei	r2,r2,32
    8de4:	1000271e 	bne	r2,zero,8e84 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8de8:	0005303a 	rdctl	r2,status
    8dec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8df0:	e0fffa17 	ldw	r3,-24(fp)
    8df4:	00bfff84 	movi	r2,-2
    8df8:	1884703a 	and	r2,r3,r2
    8dfc:	1001703a 	wrctl	status,r2
  
  return context;
    8e00:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    8e04:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    8e08:	00c00074 	movhi	r3,1
    8e0c:	18e87404 	addi	r3,r3,-24112
    8e10:	e0bff817 	ldw	r2,-32(fp)
    8e14:	100490fa 	slli	r2,r2,3
    8e18:	1885883a 	add	r2,r3,r2
    8e1c:	e0fffe17 	ldw	r3,-8(fp)
    8e20:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    8e24:	00c00074 	movhi	r3,1
    8e28:	18e87404 	addi	r3,r3,-24112
    8e2c:	e0bff817 	ldw	r2,-32(fp)
    8e30:	100490fa 	slli	r2,r2,3
    8e34:	1885883a 	add	r2,r3,r2
    8e38:	10800104 	addi	r2,r2,4
    8e3c:	e0ffff17 	ldw	r3,-4(fp)
    8e40:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    8e44:	e0bffe17 	ldw	r2,-8(fp)
    8e48:	10000526 	beq	r2,zero,8e60 <alt_iic_isr_register+0xb4>
    8e4c:	e0bff817 	ldw	r2,-32(fp)
    8e50:	e13ffc17 	ldw	r4,-16(fp)
    8e54:	100b883a 	mov	r5,r2
    8e58:	0008c240 	call	8c24 <alt_ic_irq_enable>
    8e5c:	00000406 	br	8e70 <alt_iic_isr_register+0xc4>
    8e60:	e0bff817 	ldw	r2,-32(fp)
    8e64:	e13ffc17 	ldw	r4,-16(fp)
    8e68:	100b883a 	mov	r5,r2
    8e6c:	0008cc00 	call	8cc0 <alt_ic_irq_disable>
    8e70:	e0bff715 	stw	r2,-36(fp)
    8e74:	e0bff917 	ldw	r2,-28(fp)
    8e78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e7c:	e0bffb17 	ldw	r2,-20(fp)
    8e80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    8e84:	e0bff717 	ldw	r2,-36(fp)
}
    8e88:	e037883a 	mov	sp,fp
    8e8c:	dfc00117 	ldw	ra,4(sp)
    8e90:	df000017 	ldw	fp,0(sp)
    8e94:	dec00204 	addi	sp,sp,8
    8e98:	f800283a 	ret

00008e9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8e9c:	defff804 	addi	sp,sp,-32
    8ea0:	dfc00715 	stw	ra,28(sp)
    8ea4:	df000615 	stw	fp,24(sp)
    8ea8:	dc000515 	stw	r16,20(sp)
    8eac:	df000504 	addi	fp,sp,20
    8eb0:	e13ffc15 	stw	r4,-16(fp)
    8eb4:	e17ffd15 	stw	r5,-12(fp)
    8eb8:	e1bffe15 	stw	r6,-8(fp)
    8ebc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8ec0:	e13ffd17 	ldw	r4,-12(fp)
    8ec4:	e17ffe17 	ldw	r5,-8(fp)
    8ec8:	e1bfff17 	ldw	r6,-4(fp)
    8ecc:	00091340 	call	9134 <open>
    8ed0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8ed4:	e0bffb17 	ldw	r2,-20(fp)
    8ed8:	10002216 	blt	r2,zero,8f64 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    8edc:	04000074 	movhi	r16,1
    8ee0:	84271204 	addi	r16,r16,-25528
    8ee4:	e0bffb17 	ldw	r2,-20(fp)
    8ee8:	1009883a 	mov	r4,r2
    8eec:	01400304 	movi	r5,12
    8ef0:	0009b640 	call	9b64 <__mulsi3>
    8ef4:	8085883a 	add	r2,r16,r2
    8ef8:	10c00017 	ldw	r3,0(r2)
    8efc:	e0bffc17 	ldw	r2,-16(fp)
    8f00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8f04:	04000074 	movhi	r16,1
    8f08:	84271204 	addi	r16,r16,-25528
    8f0c:	e0bffb17 	ldw	r2,-20(fp)
    8f10:	1009883a 	mov	r4,r2
    8f14:	01400304 	movi	r5,12
    8f18:	0009b640 	call	9b64 <__mulsi3>
    8f1c:	8085883a 	add	r2,r16,r2
    8f20:	10800104 	addi	r2,r2,4
    8f24:	10c00017 	ldw	r3,0(r2)
    8f28:	e0bffc17 	ldw	r2,-16(fp)
    8f2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8f30:	04000074 	movhi	r16,1
    8f34:	84271204 	addi	r16,r16,-25528
    8f38:	e0bffb17 	ldw	r2,-20(fp)
    8f3c:	1009883a 	mov	r4,r2
    8f40:	01400304 	movi	r5,12
    8f44:	0009b640 	call	9b64 <__mulsi3>
    8f48:	8085883a 	add	r2,r16,r2
    8f4c:	10800204 	addi	r2,r2,8
    8f50:	10c00017 	ldw	r3,0(r2)
    8f54:	e0bffc17 	ldw	r2,-16(fp)
    8f58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8f5c:	e13ffb17 	ldw	r4,-20(fp)
    8f60:	000928c0 	call	928c <alt_release_fd>
  }
} 
    8f64:	e037883a 	mov	sp,fp
    8f68:	dfc00217 	ldw	ra,8(sp)
    8f6c:	df000117 	ldw	fp,4(sp)
    8f70:	dc000017 	ldw	r16,0(sp)
    8f74:	dec00304 	addi	sp,sp,12
    8f78:	f800283a 	ret

00008f7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8f7c:	defffb04 	addi	sp,sp,-20
    8f80:	dfc00415 	stw	ra,16(sp)
    8f84:	df000315 	stw	fp,12(sp)
    8f88:	df000304 	addi	fp,sp,12
    8f8c:	e13ffd15 	stw	r4,-12(fp)
    8f90:	e17ffe15 	stw	r5,-8(fp)
    8f94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8f98:	01000074 	movhi	r4,1
    8f9c:	21271504 	addi	r4,r4,-25516
    8fa0:	e17ffd17 	ldw	r5,-12(fp)
    8fa4:	01800044 	movi	r6,1
    8fa8:	01c07fc4 	movi	r7,511
    8fac:	0008e9c0 	call	8e9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8fb0:	01000074 	movhi	r4,1
    8fb4:	21271204 	addi	r4,r4,-25528
    8fb8:	e17ffe17 	ldw	r5,-8(fp)
    8fbc:	000d883a 	mov	r6,zero
    8fc0:	01c07fc4 	movi	r7,511
    8fc4:	0008e9c0 	call	8e9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8fc8:	01000074 	movhi	r4,1
    8fcc:	21271804 	addi	r4,r4,-25504
    8fd0:	e17fff17 	ldw	r5,-4(fp)
    8fd4:	01800044 	movi	r6,1
    8fd8:	01c07fc4 	movi	r7,511
    8fdc:	0008e9c0 	call	8e9c <alt_open_fd>
}  
    8fe0:	e037883a 	mov	sp,fp
    8fe4:	dfc00117 	ldw	ra,4(sp)
    8fe8:	df000017 	ldw	fp,0(sp)
    8fec:	dec00204 	addi	sp,sp,8
    8ff0:	f800283a 	ret

00008ff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8ff4:	defffe04 	addi	sp,sp,-8
    8ff8:	dfc00115 	stw	ra,4(sp)
    8ffc:	df000015 	stw	fp,0(sp)
    9000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9004:	00800074 	movhi	r2,1
    9008:	10a7af04 	addi	r2,r2,-24900
    900c:	10800017 	ldw	r2,0(r2)
    9010:	10000526 	beq	r2,zero,9028 <alt_get_errno+0x34>
    9014:	00800074 	movhi	r2,1
    9018:	10a7af04 	addi	r2,r2,-24900
    901c:	10800017 	ldw	r2,0(r2)
    9020:	103ee83a 	callr	r2
    9024:	00000206 	br	9030 <alt_get_errno+0x3c>
    9028:	00800074 	movhi	r2,1
    902c:	10a87304 	addi	r2,r2,-24116
}
    9030:	e037883a 	mov	sp,fp
    9034:	dfc00117 	ldw	ra,4(sp)
    9038:	df000017 	ldw	fp,0(sp)
    903c:	dec00204 	addi	sp,sp,8
    9040:	f800283a 	ret

00009044 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9044:	defffb04 	addi	sp,sp,-20
    9048:	dfc00415 	stw	ra,16(sp)
    904c:	df000315 	stw	fp,12(sp)
    9050:	dc000215 	stw	r16,8(sp)
    9054:	df000204 	addi	fp,sp,8
    9058:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    905c:	e0bfff17 	ldw	r2,-4(fp)
    9060:	10800217 	ldw	r2,8(r2)
    9064:	10d00034 	orhi	r3,r2,16384
    9068:	e0bfff17 	ldw	r2,-4(fp)
    906c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9070:	e03ffe15 	stw	zero,-8(fp)
    9074:	00002206 	br	9100 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9078:	04000074 	movhi	r16,1
    907c:	84271204 	addi	r16,r16,-25528
    9080:	e0bffe17 	ldw	r2,-8(fp)
    9084:	1009883a 	mov	r4,r2
    9088:	01400304 	movi	r5,12
    908c:	0009b640 	call	9b64 <__mulsi3>
    9090:	8085883a 	add	r2,r16,r2
    9094:	10c00017 	ldw	r3,0(r2)
    9098:	e0bfff17 	ldw	r2,-4(fp)
    909c:	10800017 	ldw	r2,0(r2)
    90a0:	1880141e 	bne	r3,r2,90f4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    90a4:	04000074 	movhi	r16,1
    90a8:	84271204 	addi	r16,r16,-25528
    90ac:	e0bffe17 	ldw	r2,-8(fp)
    90b0:	1009883a 	mov	r4,r2
    90b4:	01400304 	movi	r5,12
    90b8:	0009b640 	call	9b64 <__mulsi3>
    90bc:	8085883a 	add	r2,r16,r2
    90c0:	10800204 	addi	r2,r2,8
    90c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    90c8:	10000a0e 	bge	r2,zero,90f4 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    90cc:	e13ffe17 	ldw	r4,-8(fp)
    90d0:	01400304 	movi	r5,12
    90d4:	0009b640 	call	9b64 <__mulsi3>
    90d8:	00c00074 	movhi	r3,1
    90dc:	18e71204 	addi	r3,r3,-25528
    90e0:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    90e4:	e0bfff17 	ldw	r2,-4(fp)
    90e8:	18800226 	beq	r3,r2,90f4 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    90ec:	00bffcc4 	movi	r2,-13
    90f0:	00000a06 	br	911c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    90f4:	e0bffe17 	ldw	r2,-8(fp)
    90f8:	10800044 	addi	r2,r2,1
    90fc:	e0bffe15 	stw	r2,-8(fp)
    9100:	00800074 	movhi	r2,1
    9104:	10a7ae04 	addi	r2,r2,-24904
    9108:	10800017 	ldw	r2,0(r2)
    910c:	1007883a 	mov	r3,r2
    9110:	e0bffe17 	ldw	r2,-8(fp)
    9114:	18bfd82e 	bgeu	r3,r2,9078 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9118:	0005883a 	mov	r2,zero
}
    911c:	e037883a 	mov	sp,fp
    9120:	dfc00217 	ldw	ra,8(sp)
    9124:	df000117 	ldw	fp,4(sp)
    9128:	dc000017 	ldw	r16,0(sp)
    912c:	dec00304 	addi	sp,sp,12
    9130:	f800283a 	ret

00009134 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9134:	defff604 	addi	sp,sp,-40
    9138:	dfc00915 	stw	ra,36(sp)
    913c:	df000815 	stw	fp,32(sp)
    9140:	df000804 	addi	fp,sp,32
    9144:	e13ffd15 	stw	r4,-12(fp)
    9148:	e17ffe15 	stw	r5,-8(fp)
    914c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9150:	00bfffc4 	movi	r2,-1
    9154:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9158:	00bffb44 	movi	r2,-19
    915c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9160:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9164:	e13ffd17 	ldw	r4,-12(fp)
    9168:	01400074 	movhi	r5,1
    916c:	2967ac04 	addi	r5,r5,-24912
    9170:	00094c80 	call	94c8 <alt_find_dev>
    9174:	e0bff815 	stw	r2,-32(fp)
    9178:	e0bff817 	ldw	r2,-32(fp)
    917c:	1000051e 	bne	r2,zero,9194 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9180:	e13ffd17 	ldw	r4,-12(fp)
    9184:	00095580 	call	9558 <alt_find_file>
    9188:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    918c:	00800044 	movi	r2,1
    9190:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9194:	e0bff817 	ldw	r2,-32(fp)
    9198:	10002a26 	beq	r2,zero,9244 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    919c:	e13ff817 	ldw	r4,-32(fp)
    91a0:	000966c0 	call	966c <alt_get_fd>
    91a4:	e0bff915 	stw	r2,-28(fp)
    91a8:	e0bff917 	ldw	r2,-28(fp)
    91ac:	1000030e 	bge	r2,zero,91bc <open+0x88>
    {
      status = index;
    91b0:	e0bff917 	ldw	r2,-28(fp)
    91b4:	e0bffa15 	stw	r2,-24(fp)
    91b8:	00002406 	br	924c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    91bc:	e13ff917 	ldw	r4,-28(fp)
    91c0:	01400304 	movi	r5,12
    91c4:	0009b640 	call	9b64 <__mulsi3>
    91c8:	00c00074 	movhi	r3,1
    91cc:	18e71204 	addi	r3,r3,-25528
    91d0:	10c5883a 	add	r2,r2,r3
    91d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    91d8:	e0fffe17 	ldw	r3,-8(fp)
    91dc:	00900034 	movhi	r2,16384
    91e0:	10bfffc4 	addi	r2,r2,-1
    91e4:	1886703a 	and	r3,r3,r2
    91e8:	e0bffc17 	ldw	r2,-16(fp)
    91ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    91f0:	e0bffb17 	ldw	r2,-20(fp)
    91f4:	1000051e 	bne	r2,zero,920c <open+0xd8>
    91f8:	e13ffc17 	ldw	r4,-16(fp)
    91fc:	00090440 	call	9044 <alt_file_locked>
    9200:	e0bffa15 	stw	r2,-24(fp)
    9204:	e0bffa17 	ldw	r2,-24(fp)
    9208:	10001016 	blt	r2,zero,924c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    920c:	e0bff817 	ldw	r2,-32(fp)
    9210:	10800317 	ldw	r2,12(r2)
    9214:	10000826 	beq	r2,zero,9238 <open+0x104>
    9218:	e0bff817 	ldw	r2,-32(fp)
    921c:	10800317 	ldw	r2,12(r2)
    9220:	e13ffc17 	ldw	r4,-16(fp)
    9224:	e17ffd17 	ldw	r5,-12(fp)
    9228:	e1bffe17 	ldw	r6,-8(fp)
    922c:	e1ffff17 	ldw	r7,-4(fp)
    9230:	103ee83a 	callr	r2
    9234:	00000106 	br	923c <open+0x108>
    9238:	0005883a 	mov	r2,zero
    923c:	e0bffa15 	stw	r2,-24(fp)
    9240:	00000206 	br	924c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9244:	00bffb44 	movi	r2,-19
    9248:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    924c:	e0bffa17 	ldw	r2,-24(fp)
    9250:	1000080e 	bge	r2,zero,9274 <open+0x140>
  {
    alt_release_fd (index);  
    9254:	e13ff917 	ldw	r4,-28(fp)
    9258:	000928c0 	call	928c <alt_release_fd>
    ALT_ERRNO = -status;
    925c:	0008ff40 	call	8ff4 <alt_get_errno>
    9260:	e0fffa17 	ldw	r3,-24(fp)
    9264:	00c7c83a 	sub	r3,zero,r3
    9268:	10c00015 	stw	r3,0(r2)
    return -1;
    926c:	00bfffc4 	movi	r2,-1
    9270:	00000106 	br	9278 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    9274:	e0bff917 	ldw	r2,-28(fp)
}
    9278:	e037883a 	mov	sp,fp
    927c:	dfc00117 	ldw	ra,4(sp)
    9280:	df000017 	ldw	fp,0(sp)
    9284:	dec00204 	addi	sp,sp,8
    9288:	f800283a 	ret

0000928c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    928c:	defffc04 	addi	sp,sp,-16
    9290:	dfc00315 	stw	ra,12(sp)
    9294:	df000215 	stw	fp,8(sp)
    9298:	dc000115 	stw	r16,4(sp)
    929c:	df000104 	addi	fp,sp,4
    92a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    92a4:	e0bfff17 	ldw	r2,-4(fp)
    92a8:	108000d0 	cmplti	r2,r2,3
    92ac:	1000111e 	bne	r2,zero,92f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    92b0:	04000074 	movhi	r16,1
    92b4:	84271204 	addi	r16,r16,-25528
    92b8:	e0bfff17 	ldw	r2,-4(fp)
    92bc:	1009883a 	mov	r4,r2
    92c0:	01400304 	movi	r5,12
    92c4:	0009b640 	call	9b64 <__mulsi3>
    92c8:	8085883a 	add	r2,r16,r2
    92cc:	10800204 	addi	r2,r2,8
    92d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    92d4:	04000074 	movhi	r16,1
    92d8:	84271204 	addi	r16,r16,-25528
    92dc:	e0bfff17 	ldw	r2,-4(fp)
    92e0:	1009883a 	mov	r4,r2
    92e4:	01400304 	movi	r5,12
    92e8:	0009b640 	call	9b64 <__mulsi3>
    92ec:	8085883a 	add	r2,r16,r2
    92f0:	10000015 	stw	zero,0(r2)
  }
}
    92f4:	e037883a 	mov	sp,fp
    92f8:	dfc00217 	ldw	ra,8(sp)
    92fc:	df000117 	ldw	fp,4(sp)
    9300:	dc000017 	ldw	r16,0(sp)
    9304:	dec00304 	addi	sp,sp,12
    9308:	f800283a 	ret

0000930c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    930c:	defffa04 	addi	sp,sp,-24
    9310:	df000515 	stw	fp,20(sp)
    9314:	df000504 	addi	fp,sp,20
    9318:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    931c:	0005303a 	rdctl	r2,status
    9320:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9324:	e0fffc17 	ldw	r3,-16(fp)
    9328:	00bfff84 	movi	r2,-2
    932c:	1884703a 	and	r2,r3,r2
    9330:	1001703a 	wrctl	status,r2
  
  return context;
    9334:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9338:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    933c:	e0bfff17 	ldw	r2,-4(fp)
    9340:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9344:	e0bffd17 	ldw	r2,-12(fp)
    9348:	10800017 	ldw	r2,0(r2)
    934c:	e0fffd17 	ldw	r3,-12(fp)
    9350:	18c00117 	ldw	r3,4(r3)
    9354:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9358:	e0bffd17 	ldw	r2,-12(fp)
    935c:	10800117 	ldw	r2,4(r2)
    9360:	e0fffd17 	ldw	r3,-12(fp)
    9364:	18c00017 	ldw	r3,0(r3)
    9368:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    936c:	e0bffd17 	ldw	r2,-12(fp)
    9370:	e0fffd17 	ldw	r3,-12(fp)
    9374:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9378:	e0bffd17 	ldw	r2,-12(fp)
    937c:	e0fffd17 	ldw	r3,-12(fp)
    9380:	10c00015 	stw	r3,0(r2)
    9384:	e0bffb17 	ldw	r2,-20(fp)
    9388:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    938c:	e0bffe17 	ldw	r2,-8(fp)
    9390:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9394:	e037883a 	mov	sp,fp
    9398:	df000017 	ldw	fp,0(sp)
    939c:	dec00104 	addi	sp,sp,4
    93a0:	f800283a 	ret

000093a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    93a4:	defffb04 	addi	sp,sp,-20
    93a8:	dfc00415 	stw	ra,16(sp)
    93ac:	df000315 	stw	fp,12(sp)
    93b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    93b4:	d0a00717 	ldw	r2,-32740(gp)
    93b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    93bc:	d0a0c817 	ldw	r2,-31968(gp)
    93c0:	10800044 	addi	r2,r2,1
    93c4:	d0a0c815 	stw	r2,-31968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    93c8:	00002e06 	br	9484 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    93cc:	e0bffd17 	ldw	r2,-12(fp)
    93d0:	10800017 	ldw	r2,0(r2)
    93d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    93d8:	e0bffd17 	ldw	r2,-12(fp)
    93dc:	10800403 	ldbu	r2,16(r2)
    93e0:	10803fcc 	andi	r2,r2,255
    93e4:	10000426 	beq	r2,zero,93f8 <alt_tick+0x54>
    93e8:	d0a0c817 	ldw	r2,-31968(gp)
    93ec:	1000021e 	bne	r2,zero,93f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    93f0:	e0bffd17 	ldw	r2,-12(fp)
    93f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    93f8:	e0bffd17 	ldw	r2,-12(fp)
    93fc:	10800217 	ldw	r2,8(r2)
    9400:	d0e0c817 	ldw	r3,-31968(gp)
    9404:	18801d36 	bltu	r3,r2,947c <alt_tick+0xd8>
    9408:	e0bffd17 	ldw	r2,-12(fp)
    940c:	10800403 	ldbu	r2,16(r2)
    9410:	10803fcc 	andi	r2,r2,255
    9414:	1000191e 	bne	r2,zero,947c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9418:	e0bffd17 	ldw	r2,-12(fp)
    941c:	10c00317 	ldw	r3,12(r2)
    9420:	e0bffd17 	ldw	r2,-12(fp)
    9424:	10800517 	ldw	r2,20(r2)
    9428:	1009883a 	mov	r4,r2
    942c:	183ee83a 	callr	r3
    9430:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9434:	e0bfff17 	ldw	r2,-4(fp)
    9438:	1000031e 	bne	r2,zero,9448 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    943c:	e13ffd17 	ldw	r4,-12(fp)
    9440:	000930c0 	call	930c <alt_alarm_stop>
    9444:	00000d06 	br	947c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9448:	e0bffd17 	ldw	r2,-12(fp)
    944c:	10c00217 	ldw	r3,8(r2)
    9450:	e0bfff17 	ldw	r2,-4(fp)
    9454:	1887883a 	add	r3,r3,r2
    9458:	e0bffd17 	ldw	r2,-12(fp)
    945c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10c00217 	ldw	r3,8(r2)
    9468:	d0a0c817 	ldw	r2,-31968(gp)
    946c:	1880032e 	bgeu	r3,r2,947c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    9470:	e0bffd17 	ldw	r2,-12(fp)
    9474:	00c00044 	movi	r3,1
    9478:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    947c:	e0bffe17 	ldw	r2,-8(fp)
    9480:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9484:	e0fffd17 	ldw	r3,-12(fp)
    9488:	d0a00704 	addi	r2,gp,-32740
    948c:	18bfcf1e 	bne	r3,r2,93cc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9490:	0001883a 	nop
}
    9494:	e037883a 	mov	sp,fp
    9498:	dfc00117 	ldw	ra,4(sp)
    949c:	df000017 	ldw	fp,0(sp)
    94a0:	dec00204 	addi	sp,sp,8
    94a4:	f800283a 	ret

000094a8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    94a8:	deffff04 	addi	sp,sp,-4
    94ac:	df000015 	stw	fp,0(sp)
    94b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    94b4:	000170fa 	wrctl	ienable,zero
}
    94b8:	e037883a 	mov	sp,fp
    94bc:	df000017 	ldw	fp,0(sp)
    94c0:	dec00104 	addi	sp,sp,4
    94c4:	f800283a 	ret

000094c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    94c8:	defffa04 	addi	sp,sp,-24
    94cc:	dfc00515 	stw	ra,20(sp)
    94d0:	df000415 	stw	fp,16(sp)
    94d4:	df000404 	addi	fp,sp,16
    94d8:	e13ffe15 	stw	r4,-8(fp)
    94dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    94e0:	e0bfff17 	ldw	r2,-4(fp)
    94e4:	10800017 	ldw	r2,0(r2)
    94e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    94ec:	e13ffe17 	ldw	r4,-8(fp)
    94f0:	00098340 	call	9834 <strlen>
    94f4:	10800044 	addi	r2,r2,1
    94f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    94fc:	00000d06 	br	9534 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9500:	e0bffc17 	ldw	r2,-16(fp)
    9504:	10c00217 	ldw	r3,8(r2)
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	1809883a 	mov	r4,r3
    9510:	e17ffe17 	ldw	r5,-8(fp)
    9514:	100d883a 	mov	r6,r2
    9518:	00097ec0 	call	97ec <memcmp>
    951c:	1000021e 	bne	r2,zero,9528 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9520:	e0bffc17 	ldw	r2,-16(fp)
    9524:	00000706 	br	9544 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9528:	e0bffc17 	ldw	r2,-16(fp)
    952c:	10800017 	ldw	r2,0(r2)
    9530:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9534:	e0fffc17 	ldw	r3,-16(fp)
    9538:	e0bfff17 	ldw	r2,-4(fp)
    953c:	18bff01e 	bne	r3,r2,9500 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9540:	0005883a 	mov	r2,zero
}
    9544:	e037883a 	mov	sp,fp
    9548:	dfc00117 	ldw	ra,4(sp)
    954c:	df000017 	ldw	fp,0(sp)
    9550:	dec00204 	addi	sp,sp,8
    9554:	f800283a 	ret

00009558 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9558:	defffb04 	addi	sp,sp,-20
    955c:	dfc00415 	stw	ra,16(sp)
    9560:	df000315 	stw	fp,12(sp)
    9564:	df000304 	addi	fp,sp,12
    9568:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    956c:	00800074 	movhi	r2,1
    9570:	10a7aa04 	addi	r2,r2,-24920
    9574:	10800017 	ldw	r2,0(r2)
    9578:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    957c:	00003106 	br	9644 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9580:	e0bffd17 	ldw	r2,-12(fp)
    9584:	10800217 	ldw	r2,8(r2)
    9588:	1009883a 	mov	r4,r2
    958c:	00098340 	call	9834 <strlen>
    9590:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9594:	e0bffd17 	ldw	r2,-12(fp)
    9598:	10c00217 	ldw	r3,8(r2)
    959c:	e0bffe17 	ldw	r2,-8(fp)
    95a0:	10bfffc4 	addi	r2,r2,-1
    95a4:	1885883a 	add	r2,r3,r2
    95a8:	10800003 	ldbu	r2,0(r2)
    95ac:	10803fcc 	andi	r2,r2,255
    95b0:	1080201c 	xori	r2,r2,128
    95b4:	10bfe004 	addi	r2,r2,-128
    95b8:	10800bd8 	cmpnei	r2,r2,47
    95bc:	1000031e 	bne	r2,zero,95cc <alt_find_file+0x74>
    {
      len -= 1;
    95c0:	e0bffe17 	ldw	r2,-8(fp)
    95c4:	10bfffc4 	addi	r2,r2,-1
    95c8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    95cc:	e0bffe17 	ldw	r2,-8(fp)
    95d0:	e0ffff17 	ldw	r3,-4(fp)
    95d4:	1885883a 	add	r2,r3,r2
    95d8:	10800003 	ldbu	r2,0(r2)
    95dc:	10803fcc 	andi	r2,r2,255
    95e0:	1080201c 	xori	r2,r2,128
    95e4:	10bfe004 	addi	r2,r2,-128
    95e8:	10800be0 	cmpeqi	r2,r2,47
    95ec:	1000081e 	bne	r2,zero,9610 <alt_find_file+0xb8>
    95f0:	e0bffe17 	ldw	r2,-8(fp)
    95f4:	e0ffff17 	ldw	r3,-4(fp)
    95f8:	1885883a 	add	r2,r3,r2
    95fc:	10800003 	ldbu	r2,0(r2)
    9600:	10803fcc 	andi	r2,r2,255
    9604:	1080201c 	xori	r2,r2,128
    9608:	10bfe004 	addi	r2,r2,-128
    960c:	10000a1e 	bne	r2,zero,9638 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9610:	e0bffd17 	ldw	r2,-12(fp)
    9614:	10c00217 	ldw	r3,8(r2)
    9618:	e0bffe17 	ldw	r2,-8(fp)
    961c:	1809883a 	mov	r4,r3
    9620:	e17fff17 	ldw	r5,-4(fp)
    9624:	100d883a 	mov	r6,r2
    9628:	00097ec0 	call	97ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    962c:	1000021e 	bne	r2,zero,9638 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9630:	e0bffd17 	ldw	r2,-12(fp)
    9634:	00000806 	br	9658 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9638:	e0bffd17 	ldw	r2,-12(fp)
    963c:	10800017 	ldw	r2,0(r2)
    9640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9644:	e0fffd17 	ldw	r3,-12(fp)
    9648:	00800074 	movhi	r2,1
    964c:	10a7aa04 	addi	r2,r2,-24920
    9650:	18bfcb1e 	bne	r3,r2,9580 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9654:	0005883a 	mov	r2,zero
}
    9658:	e037883a 	mov	sp,fp
    965c:	dfc00117 	ldw	ra,4(sp)
    9660:	df000017 	ldw	fp,0(sp)
    9664:	dec00204 	addi	sp,sp,8
    9668:	f800283a 	ret

0000966c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    966c:	defffa04 	addi	sp,sp,-24
    9670:	dfc00515 	stw	ra,20(sp)
    9674:	df000415 	stw	fp,16(sp)
    9678:	dc000315 	stw	r16,12(sp)
    967c:	df000304 	addi	fp,sp,12
    9680:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9684:	00bffa04 	movi	r2,-24
    9688:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    968c:	e03ffd15 	stw	zero,-12(fp)
    9690:	00002106 	br	9718 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    9694:	04000074 	movhi	r16,1
    9698:	84271204 	addi	r16,r16,-25528
    969c:	e0bffd17 	ldw	r2,-12(fp)
    96a0:	1009883a 	mov	r4,r2
    96a4:	01400304 	movi	r5,12
    96a8:	0009b640 	call	9b64 <__mulsi3>
    96ac:	8085883a 	add	r2,r16,r2
    96b0:	10800017 	ldw	r2,0(r2)
    96b4:	1000151e 	bne	r2,zero,970c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    96b8:	04000074 	movhi	r16,1
    96bc:	84271204 	addi	r16,r16,-25528
    96c0:	e0bffd17 	ldw	r2,-12(fp)
    96c4:	1009883a 	mov	r4,r2
    96c8:	01400304 	movi	r5,12
    96cc:	0009b640 	call	9b64 <__mulsi3>
    96d0:	8085883a 	add	r2,r16,r2
    96d4:	e0ffff17 	ldw	r3,-4(fp)
    96d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    96dc:	00800074 	movhi	r2,1
    96e0:	10a7ae04 	addi	r2,r2,-24904
    96e4:	10c00017 	ldw	r3,0(r2)
    96e8:	e0bffd17 	ldw	r2,-12(fp)
    96ec:	1880040e 	bge	r3,r2,9700 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    96f0:	00800074 	movhi	r2,1
    96f4:	10a7ae04 	addi	r2,r2,-24904
    96f8:	e0fffd17 	ldw	r3,-12(fp)
    96fc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9700:	e0bffd17 	ldw	r2,-12(fp)
    9704:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9708:	00000606 	br	9724 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    970c:	e0bffd17 	ldw	r2,-12(fp)
    9710:	10800044 	addi	r2,r2,1
    9714:	e0bffd15 	stw	r2,-12(fp)
    9718:	e0bffd17 	ldw	r2,-12(fp)
    971c:	10800810 	cmplti	r2,r2,32
    9720:	103fdc1e 	bne	r2,zero,9694 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9724:	e0bffe17 	ldw	r2,-8(fp)
}
    9728:	e037883a 	mov	sp,fp
    972c:	dfc00217 	ldw	ra,8(sp)
    9730:	df000117 	ldw	fp,4(sp)
    9734:	dc000017 	ldw	r16,0(sp)
    9738:	dec00304 	addi	sp,sp,12
    973c:	f800283a 	ret

00009740 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9740:	defffb04 	addi	sp,sp,-20
    9744:	df000415 	stw	fp,16(sp)
    9748:	df000404 	addi	fp,sp,16
    974c:	e13ffe15 	stw	r4,-8(fp)
    9750:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    9754:	e0bfff17 	ldw	r2,-4(fp)
    9758:	10840070 	cmpltui	r2,r2,4097
    975c:	1000021e 	bne	r2,zero,9768 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    9760:	00840004 	movi	r2,4096
    9764:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    9768:	e0fffe17 	ldw	r3,-8(fp)
    976c:	e0bfff17 	ldw	r2,-4(fp)
    9770:	1885883a 	add	r2,r3,r2
    9774:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9778:	e0bffe17 	ldw	r2,-8(fp)
    977c:	e0bffc15 	stw	r2,-16(fp)
    9780:	00000506 	br	9798 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9784:	e0bffc17 	ldw	r2,-16(fp)
    9788:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    978c:	e0bffc17 	ldw	r2,-16(fp)
    9790:	10800804 	addi	r2,r2,32
    9794:	e0bffc15 	stw	r2,-16(fp)
    9798:	e0fffc17 	ldw	r3,-16(fp)
    979c:	e0bffd17 	ldw	r2,-12(fp)
    97a0:	18bff836 	bltu	r3,r2,9784 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    97a4:	e0bffe17 	ldw	r2,-8(fp)
    97a8:	108007cc 	andi	r2,r2,31
    97ac:	10000226 	beq	r2,zero,97b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    97b0:	e0bffc17 	ldw	r2,-16(fp)
    97b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    97b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    97bc:	e037883a 	mov	sp,fp
    97c0:	df000017 	ldw	fp,0(sp)
    97c4:	dec00104 	addi	sp,sp,4
    97c8:	f800283a 	ret

000097cc <exit>:
    97cc:	defffe04 	addi	sp,sp,-8
    97d0:	000b883a 	mov	r5,zero
    97d4:	dc000015 	stw	r16,0(sp)
    97d8:	dfc00115 	stw	ra,4(sp)
    97dc:	2021883a 	mov	r16,r4
    97e0:	000985c0 	call	985c <__call_exitprocs>
    97e4:	8009883a 	mov	r4,r16
    97e8:	0009b8c0 	call	9b8c <_exit>

000097ec <memcmp>:
    97ec:	30000d26 	beq	r6,zero,9824 <memcmp+0x38>
    97f0:	20c00003 	ldbu	r3,0(r4)
    97f4:	28800003 	ldbu	r2,0(r5)
    97f8:	18800c1e 	bne	r3,r2,982c <memcmp+0x40>
    97fc:	31bfff84 	addi	r6,r6,-2
    9800:	01ffffc4 	movi	r7,-1
    9804:	00000406 	br	9818 <memcmp+0x2c>
    9808:	20c00003 	ldbu	r3,0(r4)
    980c:	28800003 	ldbu	r2,0(r5)
    9810:	31bfffc4 	addi	r6,r6,-1
    9814:	1880051e 	bne	r3,r2,982c <memcmp+0x40>
    9818:	21000044 	addi	r4,r4,1
    981c:	29400044 	addi	r5,r5,1
    9820:	31fff91e 	bne	r6,r7,9808 <memcmp+0x1c>
    9824:	0005883a 	mov	r2,zero
    9828:	f800283a 	ret
    982c:	1885c83a 	sub	r2,r3,r2
    9830:	f800283a 	ret

00009834 <strlen>:
    9834:	20800007 	ldb	r2,0(r4)
    9838:	10000626 	beq	r2,zero,9854 <strlen+0x20>
    983c:	2005883a 	mov	r2,r4
    9840:	10800044 	addi	r2,r2,1
    9844:	10c00007 	ldb	r3,0(r2)
    9848:	183ffd1e 	bne	r3,zero,9840 <strlen+0xc>
    984c:	1105c83a 	sub	r2,r2,r4
    9850:	f800283a 	ret
    9854:	0005883a 	mov	r2,zero
    9858:	f800283a 	ret

0000985c <__call_exitprocs>:
    985c:	00800074 	movhi	r2,1
    9860:	10a7b304 	addi	r2,r2,-24884
    9864:	10800017 	ldw	r2,0(r2)
    9868:	defff204 	addi	sp,sp,-56
    986c:	df000c15 	stw	fp,48(sp)
    9870:	d8800015 	stw	r2,0(sp)
    9874:	10800c04 	addi	r2,r2,48
    9878:	dd400915 	stw	r21,36(sp)
    987c:	dfc00d15 	stw	ra,52(sp)
    9880:	ddc00b15 	stw	r23,44(sp)
    9884:	dd800a15 	stw	r22,40(sp)
    9888:	dd000815 	stw	r20,32(sp)
    988c:	dcc00715 	stw	r19,28(sp)
    9890:	dc800615 	stw	r18,24(sp)
    9894:	dc400515 	stw	r17,20(sp)
    9898:	dc000415 	stw	r16,16(sp)
    989c:	d9000115 	stw	r4,4(sp)
    98a0:	2839883a 	mov	fp,r5
    98a4:	d8800215 	stw	r2,8(sp)
    98a8:	057fffc4 	movi	r21,-1
    98ac:	d8800017 	ldw	r2,0(sp)
    98b0:	dd800217 	ldw	r22,8(sp)
    98b4:	15c00c17 	ldw	r23,48(r2)
    98b8:	b8001b26 	beq	r23,zero,9928 <__call_exitprocs+0xcc>
    98bc:	b9000117 	ldw	r4,4(r23)
    98c0:	bd002217 	ldw	r20,136(r23)
    98c4:	243fffc4 	addi	r16,r4,-1
    98c8:	80001416 	blt	r16,zero,991c <__call_exitprocs+0xc0>
    98cc:	244007c4 	addi	r17,r4,31
    98d0:	21000044 	addi	r4,r4,1
    98d4:	8c63883a 	add	r17,r17,r17
    98d8:	8427883a 	add	r19,r16,r16
    98dc:	2109883a 	add	r4,r4,r4
    98e0:	8c63883a 	add	r17,r17,r17
    98e4:	9ce7883a 	add	r19,r19,r19
    98e8:	2109883a 	add	r4,r4,r4
    98ec:	a463883a 	add	r17,r20,r17
    98f0:	a4e7883a 	add	r19,r20,r19
    98f4:	b925883a 	add	r18,r23,r4
    98f8:	e0001726 	beq	fp,zero,9958 <__call_exitprocs+0xfc>
    98fc:	a0000226 	beq	r20,zero,9908 <__call_exitprocs+0xac>
    9900:	89400017 	ldw	r5,0(r17)
    9904:	2f001426 	beq	r5,fp,9958 <__call_exitprocs+0xfc>
    9908:	843fffc4 	addi	r16,r16,-1
    990c:	8c7fff04 	addi	r17,r17,-4
    9910:	9cffff04 	addi	r19,r19,-4
    9914:	94bfff04 	addi	r18,r18,-4
    9918:	857ff71e 	bne	r16,r21,98f8 <__call_exitprocs+0x9c>
    991c:	00800034 	movhi	r2,0
    9920:	10800004 	addi	r2,r2,0
    9924:	1000311e 	bne	r2,zero,99ec <__call_exitprocs+0x190>
    9928:	dfc00d17 	ldw	ra,52(sp)
    992c:	df000c17 	ldw	fp,48(sp)
    9930:	ddc00b17 	ldw	r23,44(sp)
    9934:	dd800a17 	ldw	r22,40(sp)
    9938:	dd400917 	ldw	r21,36(sp)
    993c:	dd000817 	ldw	r20,32(sp)
    9940:	dcc00717 	ldw	r19,28(sp)
    9944:	dc800617 	ldw	r18,24(sp)
    9948:	dc400517 	ldw	r17,20(sp)
    994c:	dc000417 	ldw	r16,16(sp)
    9950:	dec00e04 	addi	sp,sp,56
    9954:	f800283a 	ret
    9958:	b9000117 	ldw	r4,4(r23)
    995c:	92000017 	ldw	r8,0(r18)
    9960:	213fffc4 	addi	r4,r4,-1
    9964:	24001a26 	beq	r4,r16,99d0 <__call_exitprocs+0x174>
    9968:	90000015 	stw	zero,0(r18)
    996c:	403fe626 	beq	r8,zero,9908 <__call_exitprocs+0xac>
    9970:	ba400117 	ldw	r9,4(r23)
    9974:	a0001226 	beq	r20,zero,99c0 <__call_exitprocs+0x164>
    9978:	00800044 	movi	r2,1
    997c:	1408983a 	sll	r4,r2,r16
    9980:	a1404017 	ldw	r5,256(r20)
    9984:	214a703a 	and	r5,r4,r5
    9988:	28000d26 	beq	r5,zero,99c0 <__call_exitprocs+0x164>
    998c:	a1404117 	ldw	r5,260(r20)
    9990:	2148703a 	and	r4,r4,r5
    9994:	2000101e 	bne	r4,zero,99d8 <__call_exitprocs+0x17c>
    9998:	99400017 	ldw	r5,0(r19)
    999c:	d9000117 	ldw	r4,4(sp)
    99a0:	da400315 	stw	r9,12(sp)
    99a4:	403ee83a 	callr	r8
    99a8:	da400317 	ldw	r9,12(sp)
    99ac:	b9000117 	ldw	r4,4(r23)
    99b0:	227fbe1e 	bne	r4,r9,98ac <__call_exitprocs+0x50>
    99b4:	b1000017 	ldw	r4,0(r22)
    99b8:	25ffd326 	beq	r4,r23,9908 <__call_exitprocs+0xac>
    99bc:	003fbb06 	br	98ac <__call_exitprocs+0x50>
    99c0:	da400315 	stw	r9,12(sp)
    99c4:	403ee83a 	callr	r8
    99c8:	da400317 	ldw	r9,12(sp)
    99cc:	003ff706 	br	99ac <__call_exitprocs+0x150>
    99d0:	bc000115 	stw	r16,4(r23)
    99d4:	003fe506 	br	996c <__call_exitprocs+0x110>
    99d8:	99000017 	ldw	r4,0(r19)
    99dc:	da400315 	stw	r9,12(sp)
    99e0:	403ee83a 	callr	r8
    99e4:	da400317 	ldw	r9,12(sp)
    99e8:	003ff006 	br	99ac <__call_exitprocs+0x150>
    99ec:	b9000117 	ldw	r4,4(r23)
    99f0:	20000e1e 	bne	r4,zero,9a2c <__call_exitprocs+0x1d0>
    99f4:	b9000017 	ldw	r4,0(r23)
    99f8:	20000826 	beq	r4,zero,9a1c <__call_exitprocs+0x1c0>
    99fc:	b1000015 	stw	r4,0(r22)
    9a00:	a0000226 	beq	r20,zero,9a0c <__call_exitprocs+0x1b0>
    9a04:	a009883a 	mov	r4,r20
    9a08:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    9a0c:	b809883a 	mov	r4,r23
    9a10:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    9a14:	b5c00017 	ldw	r23,0(r22)
    9a18:	003fa706 	br	98b8 <__call_exitprocs+0x5c>
    9a1c:	0007883a 	mov	r3,zero
    9a20:	b82d883a 	mov	r22,r23
    9a24:	182f883a 	mov	r23,r3
    9a28:	003fa306 	br	98b8 <__call_exitprocs+0x5c>
    9a2c:	b8c00017 	ldw	r3,0(r23)
    9a30:	003ffb06 	br	9a20 <__call_exitprocs+0x1c4>

00009a34 <udivmodsi4>:
    9a34:	2005883a 	mov	r2,r4
    9a38:	2900182e 	bgeu	r5,r4,9a9c <udivmodsi4+0x68>
    9a3c:	28001716 	blt	r5,zero,9a9c <udivmodsi4+0x68>
    9a40:	01000804 	movi	r4,32
    9a44:	00c00044 	movi	r3,1
    9a48:	00000206 	br	9a54 <udivmodsi4+0x20>
    9a4c:	20001126 	beq	r4,zero,9a94 <udivmodsi4+0x60>
    9a50:	28000516 	blt	r5,zero,9a68 <udivmodsi4+0x34>
    9a54:	294b883a 	add	r5,r5,r5
    9a58:	213fffc4 	addi	r4,r4,-1
    9a5c:	18c7883a 	add	r3,r3,r3
    9a60:	28bffa36 	bltu	r5,r2,9a4c <udivmodsi4+0x18>
    9a64:	18000b26 	beq	r3,zero,9a94 <udivmodsi4+0x60>
    9a68:	0009883a 	mov	r4,zero
    9a6c:	11400236 	bltu	r2,r5,9a78 <udivmodsi4+0x44>
    9a70:	1145c83a 	sub	r2,r2,r5
    9a74:	20c8b03a 	or	r4,r4,r3
    9a78:	1806d07a 	srli	r3,r3,1
    9a7c:	280ad07a 	srli	r5,r5,1
    9a80:	183ffa1e 	bne	r3,zero,9a6c <udivmodsi4+0x38>
    9a84:	3000021e 	bne	r6,zero,9a90 <udivmodsi4+0x5c>
    9a88:	2005883a 	mov	r2,r4
    9a8c:	f800283a 	ret
    9a90:	f800283a 	ret
    9a94:	0009883a 	mov	r4,zero
    9a98:	003ffa06 	br	9a84 <udivmodsi4+0x50>
    9a9c:	00c00044 	movi	r3,1
    9aa0:	0009883a 	mov	r4,zero
    9aa4:	003ff106 	br	9a6c <udivmodsi4+0x38>

00009aa8 <__divsi3>:
    9aa8:	defffe04 	addi	sp,sp,-8
    9aac:	dfc00115 	stw	ra,4(sp)
    9ab0:	dc000015 	stw	r16,0(sp)
    9ab4:	20000a16 	blt	r4,zero,9ae0 <__divsi3+0x38>
    9ab8:	0021883a 	mov	r16,zero
    9abc:	28000b16 	blt	r5,zero,9aec <__divsi3+0x44>
    9ac0:	000d883a 	mov	r6,zero
    9ac4:	0009a340 	call	9a34 <udivmodsi4>
    9ac8:	80000126 	beq	r16,zero,9ad0 <__divsi3+0x28>
    9acc:	0085c83a 	sub	r2,zero,r2
    9ad0:	dfc00117 	ldw	ra,4(sp)
    9ad4:	dc000017 	ldw	r16,0(sp)
    9ad8:	dec00204 	addi	sp,sp,8
    9adc:	f800283a 	ret
    9ae0:	0109c83a 	sub	r4,zero,r4
    9ae4:	04000044 	movi	r16,1
    9ae8:	283ff50e 	bge	r5,zero,9ac0 <__divsi3+0x18>
    9aec:	014bc83a 	sub	r5,zero,r5
    9af0:	8400005c 	xori	r16,r16,1
    9af4:	003ff206 	br	9ac0 <__divsi3+0x18>

00009af8 <__modsi3>:
    9af8:	deffff04 	addi	sp,sp,-4
    9afc:	dfc00015 	stw	ra,0(sp)
    9b00:	20000516 	blt	r4,zero,9b18 <__modsi3+0x20>
    9b04:	28000c16 	blt	r5,zero,9b38 <__modsi3+0x40>
    9b08:	01800044 	movi	r6,1
    9b0c:	dfc00017 	ldw	ra,0(sp)
    9b10:	dec00104 	addi	sp,sp,4
    9b14:	0009a341 	jmpi	9a34 <udivmodsi4>
    9b18:	0109c83a 	sub	r4,zero,r4
    9b1c:	28000b16 	blt	r5,zero,9b4c <__modsi3+0x54>
    9b20:	01800044 	movi	r6,1
    9b24:	0009a340 	call	9a34 <udivmodsi4>
    9b28:	0085c83a 	sub	r2,zero,r2
    9b2c:	dfc00017 	ldw	ra,0(sp)
    9b30:	dec00104 	addi	sp,sp,4
    9b34:	f800283a 	ret
    9b38:	014bc83a 	sub	r5,zero,r5
    9b3c:	01800044 	movi	r6,1
    9b40:	dfc00017 	ldw	ra,0(sp)
    9b44:	dec00104 	addi	sp,sp,4
    9b48:	0009a341 	jmpi	9a34 <udivmodsi4>
    9b4c:	014bc83a 	sub	r5,zero,r5
    9b50:	003ff306 	br	9b20 <__modsi3+0x28>

00009b54 <__udivsi3>:
    9b54:	000d883a 	mov	r6,zero
    9b58:	0009a341 	jmpi	9a34 <udivmodsi4>

00009b5c <__umodsi3>:
    9b5c:	01800044 	movi	r6,1
    9b60:	0009a341 	jmpi	9a34 <udivmodsi4>

00009b64 <__mulsi3>:
    9b64:	0005883a 	mov	r2,zero
    9b68:	20000726 	beq	r4,zero,9b88 <__mulsi3+0x24>
    9b6c:	20c0004c 	andi	r3,r4,1
    9b70:	2008d07a 	srli	r4,r4,1
    9b74:	18000126 	beq	r3,zero,9b7c <__mulsi3+0x18>
    9b78:	1145883a 	add	r2,r2,r5
    9b7c:	294b883a 	add	r5,r5,r5
    9b80:	203ffa1e 	bne	r4,zero,9b6c <__mulsi3+0x8>
    9b84:	f800283a 	ret
    9b88:	f800283a 	ret

00009b8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    9b8c:	defffc04 	addi	sp,sp,-16
    9b90:	df000315 	stw	fp,12(sp)
    9b94:	df000304 	addi	fp,sp,12
    9b98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    9b9c:	0001883a 	nop
    9ba0:	e0bfff17 	ldw	r2,-4(fp)
    9ba4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    9ba8:	e0bffd17 	ldw	r2,-12(fp)
    9bac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    9bb0:	e0bffe17 	ldw	r2,-8(fp)
    9bb4:	10000226 	beq	r2,zero,9bc0 <_exit+0x34>
    ALT_SIM_FAIL();
    9bb8:	002af070 	cmpltui	zero,zero,43969
    9bbc:	00000106 	br	9bc4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    9bc0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    9bc4:	003fff06 	br	9bc4 <_exit+0x38>
